---
- name: Collect and export network device hostnames
  hosts: all
  gather_facts: false  # Required for ansible_date_time
  connection: ansible.netcommon.network_cli

  vars:
    ansible_network_os: "{{ 'eos' if 'eos' in group_names else 'ios' if 'ios' in group_names else omit }}"
    output_dir: "/tmp/awx_hostnames"
    csv_file: "{{ output_dir }}/hostnames.csv"  # Simplified filename

  tasks:
    - name: Create output directory
      ansible.builtin.file:
        path: "{{ output_dir }}"
        state: directory
        mode: '0755'
      delegate_to: localhost
      run_once: true

    # Collect Arista EOS hostname
    - name: Get EOS hostname
      arista.eos.eos_command:
        commands: show hostname
      register: eos_result
      when: "'eos' in group_names"
      ignore_errors: yes

    # Collect Cisco IOS hostname
    - name: Get IOS hostname
      cisco.ios.ios_command:
        commands: show running-config | include hostname
      register: ios_result
      when: "'ios' in group_names"
      ignore_errors: yes

    # Extract hostnames to facts - Fixed regex patterns
    - name: Set hostname facts
      set_fact:
        device_hostname: >-
          {% if 'eos' in group_names and eos_result is defined %}
            {{ eos_result.stdout[0] | regex_replace('.*Hostname:\\s+(\\S+).*', '\\1') }}
          {% elif 'ios' in group_names and ios_result is defined %}
            {{ ios_result.stdout[0] | regex_replace('hostname\\s+(\\S+).*', '\\1') }}
          {% else %}
            UNKNOWN
          {% endif %}

    # Create CSV content
    - name: Generate CSV content
      ansible.builtin.set_fact:
        csv_lines: "{{ csv_lines | default([]) + [ {
          'Hostname': device_hostname | trim,
          'IP': inventory_hostname,
          'Type': ansible_network_os | upper,
        } ] }}"
      when: "'eos' in group_names or 'ios' in group_names"

    # Write CSV file
    - name: Write CSV file
      ansible.builtin.copy:
        content: |
          Hostname,IP Address,Device Type
          {% for item in csv_lines %}{{ item.Hostname }},{{ item.IP }},{{ item.Type }}
          {% endfor %}
        dest: "{{ csv_file }}"
      delegate_to: localhost
      run_once: true
      when: csv_lines is defined

    - name: Register output file as artifact
      ansible.builtin.set_stats:
        data:
          artifact_path: "{{ csv_file }}"
      delegate_to: localhost
      run_once: true
      when: csv_lines is defined

    - name: Verify CSV file exists
      ansible.builtin.command: ls -la "{{ csv_file }}"
      register: file_check
      delegate_to: localhost
      run_once: true
      ignore_errors: yes
    
    - name: Show file status
      debug:
        var: file_check
      when: file_check is defined
