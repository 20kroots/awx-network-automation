---
- name: Collect network device hostnames
  hosts: all
  gather_facts: false

  # Set connection parameters
  vars:
    ansible_connection: ansible.netcommon.network_cli
    ansible_network_os: "{{ 'eos' if 'eos' in group_names else 'ios' if 'ios' in group_names else omit }}"
    output_dir: "/tmp/awx_hostnames"
    csv_file: "{{ output_dir }}/hostnames_{{ ansible_date_time.iso8601_basic_short }}.csv"

  tasks:
    # Collect hostnames from Arista EOS devices
    - name: Get EOS hostname
      arista.eos.eos_command:
        commands: show hostname
      register: hostname_result
      when: "'eos' in group_names"
      ignore_errors: yes

    # Collect hostnames from Cisco IOS devices  
    - name: Get IOS hostname
      cisco.ios.ios_command:
        commands: show running-config | include hostname
      register: hostname_result
      when: "'ios' in group_names"
      ignore_errors: yes

    # Extract hostnames to facts
    - name: Set hostname facts
      set_fact:
        device_hostname: >-
          {% if 'eos' in group_names and eos_result is defined %}
            {{ eos_result.stdout[0] | regex_replace('.*hostname is (\\S+).*', '\\1') }}
          {% elif 'ios' in group_names and ios_result is defined %}
            {{ ios_result.stdout[0] | regex_replace('hostname (\\S+)', '\\1') }}
          {% else %}
            UNKNOWN
          {% endif %}

    - name: Create output directory
      ansible.builtin.file:
        path: "{{ output_dir }}"
        state: directory
        mode: '0755'
      delegate_to: localhost
      run_once: true

    # Create CSV content
    - name: Generate CSV content
      ansible.builtin.set_fact:
        csv_lines: "{{ csv_lines | default([]) + [ {'Hostname': device_hostname | trim, 'IP': inventory_hostname, 'Type': ansible_network_os | upper } ] }}"
      when: "'eos' in group_names or 'ios' in group_names"

    # Write CSV file - FIXED TEMPLATE PATH
    - name: Write CSV file
      ansible.builtin.template:
        src: "{{ playbook_dir }}/templates/csv_template.j2"
        dest: "{{ csv_file }}"
      delegate_to: localhost
      run_once: true
      when: csv_lines is defined

    # Register file as AWX artifact
    - name: Register output file
      ansible.builtin.set_fact:
        awx_artifact_files: "{{ csv_file }}"
      delegate_to: localhost
      run_once: true
      when: csv_lines is defined
